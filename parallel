#!/usr/bin/env bash

################################################################################
# Demonstrates parallel data item processing using fifo and flock
#
# Only effective if the data item processing takes longer than the process of
# synchronizing the receipt of data item via flock

ITEMS_FILE="${1}"
ITEM_DELIMITER=$'\n'
ITEM_READ_TIMEOUT=5

################################################################################

set -o errexit
set -o nounset
set -o pipefail
set -o noglob

trap 'cleanup 2>/dev/null' EXIT

function cleanup() {
    # Prevents the main (parent) process from being interrupted until the
    # cleanup functions of the handlers (child processes) are completed
    trap '' SIGINT SIGTERM

    set +o errexit
    set +o nounset
    set +o pipefail

    for job in $(jobs -p); do
        kill -- "${job}"
    done

    wait

    unlink -- "${FIFO}"

    echo 'exited main'
}

# Handler of input item
function handler() {
    trap 'handler_cleanup' EXIT

    # For flock to work correctly, the file must be opened in each process
    # separately
    #
    # Value of file descriptor cannot be used from variable
    exec 3<"${FIFO}"

    while true; do
        flock 3
        read -r -u 3 -d "${ITEM_DELIMITER}" -t "${ITEM_READ_TIMEOUT}" ITEM
        flock --unlock 3

        printf -- '%s:\t%s\n' "${handler_id}" "${ITEM}"
    done
}

function handler_cleanup() {
    # Prevents signal handler interruptions by forwarding a signal by a
    # parent process
    trap '' SIGINT SIGTERM

    set +o errexit
    set +o nounset
    set +o pipefail

    flock --unlock 3

    printf -- 'exited handler %s\n' "${handler_id}"
}

FIFO="$(mktemp --dry-run)"
HANDLERS_QUANTITY="$(nproc)"

mkfifo -- "${FIFO}"

((handler_id = 1))

while test "${handler_id}" -le "${HANDLERS_QUANTITY}"; do
    # Current value of handler_id is inherited by child process
    handler &

    ((handler_id++))
done

cat -- "${ITEMS_FILE}" >"${FIFO}"

wait
